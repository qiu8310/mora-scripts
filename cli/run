#!/usr/bin/env node

// https://github.com/RyanZim/awesome-npm-scripts

var path = require('path')
var spawn = require('../vendors/cross-spawn')
var assign = require('../libs/lang/assign')
var findup = require('../libs/fs/findup')
var dotPropGet = require('../libs/lang/DotProp').get
var addEnvPath = require('../libs/sys/addEnvPath')
var escapeRegExp = require('../libs/lang/escapeRegExp')
var warn = require('../libs/sys/warn')
var info = require('../libs/sys/info')

// 支持参数 -e extend
// 支持参数 -s serial
// 支持参数 -p parallel

var pkgFile = findup.pkg()
var rootDir = path.dirname(pkgFile)

var pkg = require(pkgFile)
var reEnvArg = /^(\w+)=(?:'(.+)'|"(.+)"|(.+))$/
var reOptArg = /^(?:-(\w)|--(\w+))$/
var addedEnvs = []
var rePkgArgs, pkgPrefixLength

var env = assign({}, process.env)
var args = []
var bins = {}
var cmd

addEnvPath(env, path.join(rootDir, 'node_modules', '.bin'))
addEnvPath(env, path.join(rootDir, 'bin'))
buildPkgRe('pkg')

if (pkg.bin) {
  if (typeof pkg.bin === 'string') bins[pkg.name] = pkg.bin
  else if (typeof pkg.bin === 'object') bins = pkg.bin
}

var consumer, consumerArgs
var consumers = {
  // 可以指定 --prefix 或者 -p 选项
  prefix: { expectArgs: 1, handle: buildPkgRe }
}

// consumer alias
consumers.p = consumers.prefix

var all = process.argv.slice(2)

var i, arg, envKey, envVal

for (i = 0; i < all.length; i++) {
  arg = all[i]
  if (!cmd) { // 环境变量 和 此程序的参数 必须放在 run 命令之后，实际运行的命令之前
    if (reEnvArg.test(arg)) {
      envKey = RegExp.$1
      envVal = RegExp.$2 || RegExp.$3 || RegExp.$4 || ''
      env[envKey] = envVal
      addedEnvs.push(info.format(envKey + '=' + quoteShellArg(envVal)))
    } else if (reOptArg.test(arg)) {
      consumer = consumers[RegExp.$1 || RegExp.$2]
      if (consumer && all[i + consumer.expectArgs]) {
        consumerArgs = []
        while (consumerArgs.length !== consumer.expectArgs) {
          consumerArgs.push(all[++i])
        }
        consumer.handle.apply(consumer, consumerArgs)
      } else {
        warn('Illegal option ' + arg)
        process.exit(1)
      }
    } else {
      cmd = arg
    }
  } else {
    args.push(arg[0] === '-' ? arg : recursiveRepalcePkgArgs(arg))
  }
}

// 支持运行 package.json 中的 scripts 脚本
if (cmd) {
  if (bins.hasOwnProperty(cmd)) {
    cmd = bins[arg]
  } else if (pkg.scripts && pkg.scripts.hasOwnProperty(cmd)) {
    args = ['run', cmd].concat(args)
    cmd = 'npm'
    try {
      var cp = spawn.sync('git', 'config --local --get remote.origin.url'.split(' '), { stdio: 'pipe' })
      var output = cp.stdout.toString()
      if (output.includes('git@code.alipay.com')) cmd = 'tnpm'
    } catch (e) {}
  }
}

// 输出当前运行的命令
console.log(
  'Running %s %s',
  info.format('%s %s', cmd, args.map(quoteShellArg).join(' ')),
  addedEnvs.length ? 'with env: ' + addedEnvs.join(', ') : ''
)
if (cmd) spawn(cmd, args, {stdio: 'inherit', env: env})
else warn('No command to run with !')

function recursiveRepalcePkgArgs(str) {
  if (!str) return ''
  return str.replace(rePkgArgs, function(raw, prefix, path) {
    return prefix + recursiveRepalcePkgArgs(dotPropGet(pkg, path.substr(pkgPrefixLength)))
  })
}

function buildPkgRe(prefix) {
  if (!prefix) return
  pkgPrefixLength = prefix.length + 1 // 1 is for the next character "."
  prefix = escapeRegExp(prefix)

  // rePkgArg = /^pkg(?:\.[\w-]+)+$/;
  // rePkgArg = new RegExp('^' + prefix + '(?:\\.[\\w-]+)+$')

  // rePkgArgs = /(^|\b|\s)pkg(?:\.[\w-]+)+\b/g;
  // 为什么前面判断那么复杂，而结尾只用了 \b
  //    前提要知道 \b 匹配的是一个字母和非字母的分界线
  //    prefix 可以是用户提供，如果用户提供的字符并不是一个字母，如 "%"，
  //    则会无法找到 \b 这样的分界线
  rePkgArgs = new RegExp('(^|\\b|\\s)(' + prefix + '(?:\\.[\\w-]+)+\\b)', 'g')
}

function quoteShellArg(arg) {
  if (/[\s*()`$]/.test(arg)) {
    return '\'' + arg.replace(/'/g, '\\\'') + '\''
  } else {
    return arg
  }
}
